#!/bin/bash
# Rollback script for <%= application %>
# Generated by Kdeploy on <%= Time.now.strftime('%Y-%m-%d %H:%M:%S') %>

set -e

echo "🔄 Starting rollback for <%= application %> on <%= hostname %>"

# Variables
APP_DIR="<%= deploy_to %>"
ROLLBACK_STEPS=<%= rollback_steps || 1 %>
BACKUP_DIR="<%= deploy_to %>/backups"

# Function to log messages with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if service is running
check_service() {
    if systemctl is-active --quiet <%= application %>; then
        log "✅ Service <%= application %> is running"
        return 0
    else
        log "❌ Service <%= application %> is not running"
        return 1
    fi
}

# Create backup if requested
<% if backup_before_rollback %>
backup_current() {
    log "📦 Creating backup of current version..."

    BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"

    cd "$APP_DIR"
    git stash push -m "$BACKUP_NAME" || true

    log "✅ Backup created: $BACKUP_NAME"
}
<% end %>

# Rollback git repository
rollback_git() {
    log "⏪ Rolling back git repository by $ROLLBACK_STEPS step(s)..."

    cd "$APP_DIR"

    # Verify git repository
    if [ ! -d .git ]; then
        log "❌ No git repository found in $APP_DIR"
        exit 1
    fi

    # Get current commit
    CURRENT_COMMIT=$(git rev-parse HEAD)
    log "Current commit: $CURRENT_COMMIT"

    # Rollback
    git reset --hard HEAD~$ROLLBACK_STEPS

    # Get new commit
    NEW_COMMIT=$(git rev-parse HEAD)
    log "Rolled back to commit: $NEW_COMMIT"
}

# Restore dependencies
restore_dependencies() {
    log "📦 Restoring dependencies..."

    cd "$APP_DIR"

    # Check if package.json exists
    if [ -f package.json ]; then
        npm install --production
        log "✅ NPM dependencies restored"
    fi

    # Check if Gemfile exists
    if [ -f Gemfile ]; then
        bundle install --deployment
        log "✅ Ruby dependencies restored"
    fi

    # Check if requirements.txt exists
    if [ -f requirements.txt ]; then
        pip install -r requirements.txt
        log "✅ Python dependencies restored"
    fi
}

# Build application if needed
build_application() {
    log "🔨 Building application..."

    cd "$APP_DIR"

    # Check for build script
    if [ -f package.json ] && npm run build >/dev/null 2>&1; then
        npm run build
        log "✅ Application built successfully"
    else
        log "ℹ️  No build script found or build not needed"
    fi
}

# Restart services
restart_services() {
    log "🔄 Restarting services..."

    # Stop service
    log "Stopping <%= application %> service..."
    systemctl stop <%= application %> || true

    # Wait a moment
    sleep 2

    # Start service
    log "Starting <%= application %> service..."
    systemctl start <%= application %>

    # Check service status
    sleep 3
    if check_service; then
        log "✅ Service restarted successfully"
    else
        log "❌ Service failed to start"
        exit 1
    fi
}

# Verify rollback
verify_rollback() {
    log "🔍 Verifying rollback..."

    # Check service health
    for i in {1..10}; do
        if curl -f http://localhost:<%= app_port || 3000 %>/health >/dev/null 2>&1; then
            log "✅ Health check passed"
            return 0
        else
            log "⏳ Health check failed, retrying... (attempt $i/10)"
            sleep 3
        fi
    done

    log "❌ Health check failed after rollback"
    exit 1
}

# Main rollback process
main() {
    log "🚀 Starting rollback process..."

    <% if backup_before_rollback %>
    backup_current
    <% end %>

    rollback_git
    restore_dependencies
    build_application
    restart_services
    verify_rollback

    log "🎉 Rollback completed successfully!"
    log "Application <%= application %> has been rolled back by $ROLLBACK_STEPS step(s)"
}

# Run main function
main "$@"